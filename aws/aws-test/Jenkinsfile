pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
    }
    agent {label 'internal-build.ncats'}
    parameters {
        choice(name: 'Action', choices: 'plan\napply', description: 'Manual build stages')
    }
    triggers {
        pollSCM('H/10 * * * *')
    }
    stages {
        stage('Checkout script') {
            when {
                anyOf {
                    changeset "aws/aws-test/**"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Submodule and Terraform Init') {
            when {
                anyOf {
                    changeset "aws/aws-test/**"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                sshagent (credentials: ['labsharesvc']) {
                    sh 'git submodule update --init --recursive; sleep 10s'
                    ansiColor('xterm') {
                        sh 'cd aws/aws-test; terraform1.2.4 init'
                    }
                }
            }
        }
        stage('Terraform Plan') {
            when {
                anyOf {
                    changeset "aws/aws-test/**"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                ansiColor('xterm') {
                    sh 'cd aws/aws-test; terraform1.2.4 plan'
                }
            }
        }
        stage('Terraform Apply') {
            when {
                allOf {
                    expression {
                        params.Action == 'apply'
                    }
                    anyOf {
                        changeset "aws/aws-test/**"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                ansiColor('xterm') {
                    sh 'cd aws/aws-test; terraform1.2.4 apply -auto-approve'
                }
            }
        }
    }
}
