pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
    }
    agent {label 'internal-build'}
    parameters {
        choice(name: 'Action', choices: 'plan\napply', description: 'Manual build stages')
        string(name: 'ENVIRONMENT', defaultValue: 'cpe', description: 'Role Name (mandatory)')
    }
    triggers {
        pollSCM('H/10 * * * *')
    }
    environment {
        PROJECT_NAME     = ""
        INIT_TOKEN       = credentials('')                        // OIDC provider this token is Auto Generated //
        SPHINX_TOKEN     = credentials('')     // PatToken Read Only Access for the DevOps Artifacts Repo https://github.com/Sphinx-Automation/devops-pipeline-artifacts.git //
        ROLE_NAME        = "$ENVIRONMENT-$PROJECT_NAME"                      // Role Name is Mandatory Variable for Vault //
        APP_TYPE         = ""
        SUB_PATH         = ""
    }
    stages {
        stage('getSecrets By Role') {
            steps {
                cleanWs()
                checkout scm
                script {
                sh '''
                    ### Cloning the repo from DevOps Artifacts Repository Repo ###
                    ###  Running the script with Env specific to Authenticate Vault & Get Application Secrets for Docker Token###
                    '''
                }
            }
        }
        stage('Submodule and Terraform Init') {
            when {
                anyOf {
                    changeset "azure/workflow-automation/**"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){
                sh '''#!/bin/bash
                    source prepare.sh
                    '''
                ansiColor('xterm') {
                    sh 'cd azure/workflow-automation; terraform1.5.7 init'
                    }
                }
            }
        }
        stage('Terraform Plan') {
            when {
                anyOf {
                    changeset "azure/workflow-automation/**"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                ansiColor('xterm') {
                    sh 'cd azure/workflow-automation; terraform1.5.7 plan'
                }
            }
        }
        stage('Terraform Apply') {
            when {
                allOf {
                    expression {
                        params.Action == 'apply'
                    }
                    anyOf {
                        changeset "azure/workflow-automation/**"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                ansiColor('xterm') {
                    sh 'cd azure/workflow-automation; terraform1.5.7 apply -auto-approve'
                }
            }
            post {
               always {
                    echo " Clean up the workspace in deploy node!"
                    cleanWs()
                }
            }
        }
    }
}
